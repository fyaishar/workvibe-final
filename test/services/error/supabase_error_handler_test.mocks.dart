// Mocks generated by Mockito 5.4.5 from annotations
// in finalworkvibe/test/services/error/supabase_error_handler_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:finalworkvibe/services/error/error_service.dart' as _i2;
import 'package:finalworkvibe/services/error/logging_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ErrorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorService extends _i1.Mock implements _i2.ErrorService {
  MockErrorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String handleSupabaseError(Object? error) =>
      (super.noSuchMethod(
            Invocation.method(#handleSupabaseError, [error]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#handleSupabaseError, [error]),
            ),
          )
          as String);

  @override
  String handleNetworkError(Object? error) =>
      (super.noSuchMethod(
            Invocation.method(#handleNetworkError, [error]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#handleNetworkError, [error]),
            ),
          )
          as String);

  @override
  String handleRealtimeError(Object? error) =>
      (super.noSuchMethod(
            Invocation.method(#handleRealtimeError, [error]),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.method(#handleRealtimeError, [error]),
            ),
          )
          as String);

  @override
  void logError(String? source, Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(
        Invocation.method(#logError, [source, error, stackTrace]),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i4.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void log(
    String? message, {
    _i4.LogLevel? level = _i4.LogLevel.info,
    _i4.LogCategory? category = _i4.LogCategory.general,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #log,
      [message],
      {
        #level: level,
        #category: category,
        #error: error,
        #stackTrace: stackTrace,
        #additionalData: additionalData,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  void debug(
    String? message, {
    _i4.LogCategory? category = _i4.LogCategory.general,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #debug,
      [message],
      {#category: category, #additionalData: additionalData},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void info(
    String? message, {
    _i4.LogCategory? category = _i4.LogCategory.general,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #info,
      [message],
      {#category: category, #additionalData: additionalData},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void warning(
    String? message, {
    _i4.LogCategory? category = _i4.LogCategory.general,
    Object? error,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #warning,
      [message],
      {#category: category, #error: error, #additionalData: additionalData},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void error(
    String? message, {
    _i4.LogCategory? category = _i4.LogCategory.general,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #error,
      [message],
      {
        #category: category,
        #error: error,
        #stackTrace: stackTrace,
        #additionalData: additionalData,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  void fatal(
    String? message, {
    _i4.LogCategory? category = _i4.LogCategory.general,
    Object? error,
    StackTrace? stackTrace,
    Map<String, dynamic>? additionalData,
  }) => super.noSuchMethod(
    Invocation.method(
      #fatal,
      [message],
      {
        #category: category,
        #error: error,
        #stackTrace: stackTrace,
        #additionalData: additionalData,
      },
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logSupabaseOperation(
    String? operation,
    String? table, {
    String? id,
    Map<String, dynamic>? data,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #logSupabaseOperation,
      [operation, table],
      {#id: id, #data: data, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logAuthEvent(
    String? event, {
    String? userId,
    String? email,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #logAuthEvent,
      [event],
      {#userId: userId, #email: email, #error: error, #stackTrace: stackTrace},
    ),
    returnValueForMissingStub: null,
  );

  @override
  void logRealtimeEvent(
    String? event,
    String? channel, {
    String? eventType,
    Object? payload,
    Object? error,
    StackTrace? stackTrace,
  }) => super.noSuchMethod(
    Invocation.method(
      #logRealtimeEvent,
      [event, channel],
      {
        #eventType: eventType,
        #payload: payload,
        #error: error,
        #stackTrace: stackTrace,
      },
    ),
    returnValueForMissingStub: null,
  );
}
